name: Deploy Auth Service

on:
  push:
    branches:
      - main
    paths:
      - 'apps/auth/**'
      - 'libs/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/deploy-auth.yml'

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: nest-auth
  CLUSTER_NAME: nest-micro-service-auth
  ECS_SERVICE_NAME: auth-service-task-service-d2bqs1ur
  TASK_DEFINITION_FAMILY: auth-service-task
  CONTAINER_NAME: Auth-container

jobs:
  deploy:
    name: Build and Deploy Auth Service
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG \
            --target production \
            -f apps/auth/Dockerfile ./apps/auth
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Fetch current task definition
        id: fetch-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION_FAMILY }} \
            --query 'taskDefinition' \
            > task-def.json

      - name: Update task definition with new image
        id: update-task-def
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
          cat task-def.json | jq \
            --arg IMAGE "$IMAGE_URI" \
            --arg NAME "${{ env.CONTAINER_NAME }}" \
            'del(.taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy) |
            .containerDefinitions |= map(if .name == $NAME then .image = $IMAGE else . end)' \
            > new-task-def.json

      - name: Register new task definition revision
        id: register-task-def
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.NEW_TASK_DEF_ARN }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
